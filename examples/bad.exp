/* vide */
struct S1 {
};

/* double declaration de meme idf */
struct S1 {
    int a;
};

struct S2 {
    int a ;
    int b ;
};

struct S3 {
    struct S1 * champ1S3, * champ2S3;
    struct S2 * champ3S3, * champ4S3;
    int champ5S3, champ6S3;
    struct S1 * champ1S3 ;                                                     // unicité de déclaration de champs de struct
    struct S4 * inconnuStruct;
};

/* fonction avec type de retour : INT */
int fctI(struct S3 * paramSFctI1, int paramIFctI2) {
    while (paramIFctI2 > 0) {
        int while1I1;
        struct S3 * while1S1, *while1S2;
        struct S1 * while1I1 ;                                                 // une double déclaration de while1I1
        paramSFctI1 = while1S1 + while1S2 ;                                    // somme de pointer non autorisée
        while1I1 = (while1I1 == while1I1) + 5 ;

        if (paramSFctI1->champ3S3->a != 0) {
            int if1I1, if1I2 ;

            while (paramSFctI1->champ3S3->a > paramSFctI1->champ3S3->b)  {
                int while2I1 ;
                struct S3 * while2S1, *while2S2;

                //int inconnu1 ;                                               // ne pas déclarer inconnu1 comme ça on utilise une var pas déclaré
                inconnu1 = 0;
                while2S1 = while2S1->champ5S3 + 1 ;                            // int affecté à une struct S3
                if1I2 = if1I2-1 ;
                print(if1I2) ;
                while2I1 = if1I2;
                while2I1==while2I1+5+9+while2I1 < paramSFctI1->champ3S3->a ;
                return while2I1;
            }

            paramSFctI1->champ3S3->a = paramSFctI1->champ3S3->a - 1;
        }
    }
    return  paramIFctI2 + 2;
}


int fctI2(struct S5 * paramNotDefined, int paramI){
    int varIFctI2 ;
    struct S3 * varSFctI2 ;
    int a,b,c,d,e,f ;
    varSFctI2->champ5S3->noOne;                                                 // struct -> int -> int
    varIFctI2->champInt ;                                                       // int -> int

    if (a<b<c<d<e<f) return 1 ;
    else if (a>=b>=c>=d>=e>=f>=10) return 2 ;
    else if (a==b==c==d==e==f==10) return 3 ;
    else if (a<=b<=c<=d<=e<=f<=10) return 4 ;
    else if (a==b==c==d==e==f==10) return 5 ;
    else if (a<b<c<d<e<f<10) return 6 ;
    else if (a>b>c>d>e>f>10) return 7 ;
    else return 0;

    a = varSFctI2 + '\'' ;

    return paramI ;
}


/* fonction avec type de retour : Struct */
struct S3 * fctS() {
    int resI ;
    struct S3 * varSFctS1 ;
    resI = 0;
    inconnu2 = malloc(sizeof(struct S3)) ;                                      // variable non déclarée
    return fctI(varSFctS1, resI) ;                                              // return un int et pas struct avec une fonction
}


struct S2 * fctS2(int param1FctS2) {
    struct S1 * resS1 ;
    struct S3 * varSFctS2 ;

    if (param1FctS2 != -param1FctS2)
        resS1 = varSFctS2 + param1FctS2;                                         // struct S1 = struct S3 + int

    if (varSFctS2->champ3S3->a)
        resS1 = resS1 + 1 ;                                                      // struct S1 = struct S1 + int

    return resS1 ;                                                               // return un struct S1 et pas struct S2
}



/* double déclaration de fctI ( la première return int et là return struct ) */
struct S1 * fctI() {
    struct S1 * varSFctI ;
    return a;
}

/* double déclaration de fctS ( la première return struct et là return int ) */
int fctS(int a, int b, struct S3 * c) {
    return a;
}


/* main */
int start(int paramMain1, int paramMain2) {
    int res ;
    struct S3 * varS1Main ;
    struct S2 * varS2Main ;
    struct S4 * structInconnu ;                                                 // une structure pas définie

    print(res);
    print(inconnu) ;                                                            // print inconnu pad déclaré
    print(varS1Main);                                                           // print doit juste print un int
    print(structInconnu);

    varS2Main = malloc(varS2Main) ;                                             // ça doit prendre comme param un int
    varS2Main = malloc(sizeof(struct S2));
    varS1Main = malloc(sizeof(struct S3));

    varS2Main->a = -10;                                                         // affectation (typage)
    varS2Main->b = 5;
    varS2Main->champPasDef = 6;                                                 // n'acceder qu'aux champs def

    res = 'a' + '\'' * -8 ;
    res = paramMain1 / 0 ;                                                      // division par 0

    res = fct(5, varS2Main) ;                                                   // fonction pas définie
    res = fctI(5, varS2Main);                                                   // type et ordre des params
    res = fctI(5, 2, varS2Main);                                                // nombre de param
    return res;                                                                 // type de retour d'une fonction
}

